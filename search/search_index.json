{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dx-Dash is a basic serverless application retrieving weather data through Weather-API calls. Media used by the application such as maps, photos and icons has been collected through Google Maps and Unsplash API calls as well as from the Icons8 website. This documentation is written in the purpose of keeping up with the development workload. Furthermore, it should help understand better the APIs features in order to make free of charge API calls per user session. In other to structure the project development, we highlight the following work process: Research Prototyping: Prototyping involves creating an interactive model or representation of the website or application to simulate its functionality. [Inkscape as a wireframing-tool] Design: Design in web development involves creating the visual and functional aspects of a website or application. It encompasses the overall look and feel, user interface (UI), user experience (UX), layout, color schemes, typography, and graphic elements. [Bootstrap, awesome-font?] Development: using [Flask Framework] Testing: using [Pytest] Release: Deployment using the web hosting platform render . Maintenance","title":"Overview"},{"location":"license/","text":"Copyright (c) 2024 dx-Dash Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"deployment/hosting_platform/","text":"","title":"Hosting platform"},{"location":"design/user_interface/","text":"","title":"UI"},{"location":"development/1.current_location/","text":"Current user location: To get such information, two APIs are used: ipapi : looks for location for specific IP address. ipify : a simple public API gives IP address. import requests def get_location(): ip_address = requests.get('https://api64.ipify.org?format=json').json()[\"ip\"] response = requests.get(f'https://ipapi.co/{ip_address}/json/').json() location_data = { \"ip\": ip_address, \"city\": response.get(\"city\"), \"region\": response.get(\"region\"), \"country\": response.get(\"country_name\") } return location_data if __name__ == '__main__': print(get_location()) display: { \"ip\": \"...\", \"city\": \"Cologne\", \"region\": \"North Rhine-Westphalia\", \"country\": \"Germany\" }","title":"Current user location:"},{"location":"development/1.current_location/#current-user-location","text":"To get such information, two APIs are used: ipapi : looks for location for specific IP address. ipify : a simple public API gives IP address. import requests def get_location(): ip_address = requests.get('https://api64.ipify.org?format=json').json()[\"ip\"] response = requests.get(f'https://ipapi.co/{ip_address}/json/').json() location_data = { \"ip\": ip_address, \"city\": response.get(\"city\"), \"region\": response.get(\"region\"), \"country\": response.get(\"country_name\") } return location_data if __name__ == '__main__': print(get_location()) display: { \"ip\": \"...\", \"city\": \"Cologne\", \"region\": \"North Rhine-Westphalia\", \"country\": \"Germany\" }","title":"Current user location:"},{"location":"development/2.current_weather_data/","text":"Current Data Here are the available data through the endpoint for current weather.","title":"Current Data"},{"location":"development/2.current_weather_data/#current-data","text":"Here are the available data through the endpoint for current weather.","title":"Current Data"},{"location":"development/3.alerts/","text":"Alerts Alerts are retrieved with the Forecast API. Syntax Warning: A key 'alerts=yes' should be added to the request. GET https://api.weatherapi.com/v1/forecast.json?key={{key}}&q=wernigerode&alerts=yes import requests url = '...' response = requests.get(url) # display response as json object (content type mus be application/json) print(response.json()) # close connection to the server response.close() { \"...\": \"...\", \"alerts\": { \"alert\": [ { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"gale-force gusts\", \"note\": \"\", \"effective\": \"2023-01-12T07:00:00+00:00\", \"expires\": \"2023-01-12T13:00:00+00:00\", \"desc\": \"There is a risk of gale-force gusts (Level 2 of 4).\\nMax. gusts: ~ 65 km/h; Wind direction: south-west; Increased gusts: near showers and in exposed locations ~ 80 km/h\", \"instruction\": \"\" }, { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"\", \"certainty\": \"\", \"event\": \"ORKANB\u00d6EN\", \"note\": \"\", \"effective\": \"2023-01-11T21:00:00+00:00\", \"expires\": \"2023-01-12T19:00:00+00:00\", \"desc\": \"Es treten oberhalb 1000 m Orkanb\u00f6en mit Geschwindigkeiten um 130 km/h (36 m/s, 70 kn, Bft 12) aus s\u00fcdwestlicher Richtung auf.\", \"instruction\": \"\" }, { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"hurricane-force gusts\", \"note\": \"\", \"effective\": \"2023-01-11T21:00:00+00:00\", \"expires\": \"2023-01-12T19:00:00+00:00\", \"desc\": \"There is a risk of hurricane-force gusts (Level 3 of 4).\\nHeight range: > 1000 m; Max. gusts: ~ 130 km/h; Wind direction: south-west\", \"instruction\": \"\" }, { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"gale-force gusts\", \"note\": \"\", \"effective\": \"2023-01-12T02:00:00+00:00\", \"expires\": \"2023-01-13T05:00:00+00:00\", \"desc\": \"There is a risk of gale-force gusts (Level 2 of 4).\\nHeight range: > 600 m; Max. gusts: 65-85 km/h; Wind direction: south-west\", \"instruction\": \"\" }, { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"wind gusts\", \"note\": \"\", \"effective\": \"2023-01-11T23:00:00+00:00\", \"expires\": \"2023-01-12T07:00:00+00:00\", \"desc\": \"There is a risk of wind gusts (level 1 of 4).\\nMax. gusts: ~ 55 km/h; Wind direction: south-west; Increased gusts: near showers and in exposed locations ~ 65 km/h\", \"instruction\": \"\" } ] } } Encoding Strings : utf-8 --> simple print will do! import requests url = '...' response = requests.get(url) json_object = response.json() # how many alerts are there!? number_alerts = len(json_object['alerts']['alert']) # store the fourth alert as json object alert3 = json_object['alerts']['alert'][3] # display desc for the alert print(alert3[\"desc\"]) alert3: { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"hurricane-force gusts\", \"note\": \"\", \"effective\": \"2023-01-12T19:00:00+00:00\", \"expires\": \"2023-01-13T23:00:00+00:00\", \"desc\": \"There is a risk of hurricane-force gusts (Level 3 of 4).\\nHeight range: > 1000 m; Max. gusts: 100-120 km/h; Wind direction: south-west\", \"instruction\": \"\" } display: There is a risk of hurricane-force gusts (Level 3 of 4). Height range: > 1000 m; Max. gusts: 100-120 km/h; Wind direction: south-west Note: the description can be also in other languages. Dates : ISO 8601 (with time zone as UTC or offset from UTC). --> To parse the date into a datetime object use the following: import requests from dateutil.parser import parse url = '...' response = requests.get(url) json_object = response.json() alert3 = json_object['alerts']['alert'][3] time_obj_effective = parse(alert3[\"effective\"]) print(time_obj_effective.strftime('Alert effective starting from the %d, %b %Y at %H:%M o\\'clock')) display: Alert effective starting from the 12, Jan 2023 at 07:00 o'clock For datetime.datetime docs check the link .","title":"Alerts"},{"location":"development/3.alerts/#alerts","text":"Alerts are retrieved with the Forecast API.","title":"Alerts"},{"location":"development/3.alerts/#syntax","text":"Warning: A key 'alerts=yes' should be added to the request. GET https://api.weatherapi.com/v1/forecast.json?key={{key}}&q=wernigerode&alerts=yes import requests url = '...' response = requests.get(url) # display response as json object (content type mus be application/json) print(response.json()) # close connection to the server response.close() { \"...\": \"...\", \"alerts\": { \"alert\": [ { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"gale-force gusts\", \"note\": \"\", \"effective\": \"2023-01-12T07:00:00+00:00\", \"expires\": \"2023-01-12T13:00:00+00:00\", \"desc\": \"There is a risk of gale-force gusts (Level 2 of 4).\\nMax. gusts: ~ 65 km/h; Wind direction: south-west; Increased gusts: near showers and in exposed locations ~ 80 km/h\", \"instruction\": \"\" }, { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"\", \"certainty\": \"\", \"event\": \"ORKANB\u00d6EN\", \"note\": \"\", \"effective\": \"2023-01-11T21:00:00+00:00\", \"expires\": \"2023-01-12T19:00:00+00:00\", \"desc\": \"Es treten oberhalb 1000 m Orkanb\u00f6en mit Geschwindigkeiten um 130 km/h (36 m/s, 70 kn, Bft 12) aus s\u00fcdwestlicher Richtung auf.\", \"instruction\": \"\" }, { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"hurricane-force gusts\", \"note\": \"\", \"effective\": \"2023-01-11T21:00:00+00:00\", \"expires\": \"2023-01-12T19:00:00+00:00\", \"desc\": \"There is a risk of hurricane-force gusts (Level 3 of 4).\\nHeight range: > 1000 m; Max. gusts: ~ 130 km/h; Wind direction: south-west\", \"instruction\": \"\" }, { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"gale-force gusts\", \"note\": \"\", \"effective\": \"2023-01-12T02:00:00+00:00\", \"expires\": \"2023-01-13T05:00:00+00:00\", \"desc\": \"There is a risk of gale-force gusts (Level 2 of 4).\\nHeight range: > 600 m; Max. gusts: 65-85 km/h; Wind direction: south-west\", \"instruction\": \"\" }, { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"wind gusts\", \"note\": \"\", \"effective\": \"2023-01-11T23:00:00+00:00\", \"expires\": \"2023-01-12T07:00:00+00:00\", \"desc\": \"There is a risk of wind gusts (level 1 of 4).\\nMax. gusts: ~ 55 km/h; Wind direction: south-west; Increased gusts: near showers and in exposed locations ~ 65 km/h\", \"instruction\": \"\" } ] } }","title":"Syntax"},{"location":"development/3.alerts/#encoding","text":"Strings : utf-8 --> simple print will do! import requests url = '...' response = requests.get(url) json_object = response.json() # how many alerts are there!? number_alerts = len(json_object['alerts']['alert']) # store the fourth alert as json object alert3 = json_object['alerts']['alert'][3] # display desc for the alert print(alert3[\"desc\"]) alert3: { \"headline\": \"Deutscher Wetterdienst\", \"msgtype\": \"\", \"severity\": \"\", \"urgency\": \"\", \"areas\": \"\", \"category\": \"Wind,Wind\", \"certainty\": \"\", \"event\": \"hurricane-force gusts\", \"note\": \"\", \"effective\": \"2023-01-12T19:00:00+00:00\", \"expires\": \"2023-01-13T23:00:00+00:00\", \"desc\": \"There is a risk of hurricane-force gusts (Level 3 of 4).\\nHeight range: > 1000 m; Max. gusts: 100-120 km/h; Wind direction: south-west\", \"instruction\": \"\" } display: There is a risk of hurricane-force gusts (Level 3 of 4). Height range: > 1000 m; Max. gusts: 100-120 km/h; Wind direction: south-west Note: the description can be also in other languages. Dates : ISO 8601 (with time zone as UTC or offset from UTC). --> To parse the date into a datetime object use the following: import requests from dateutil.parser import parse url = '...' response = requests.get(url) json_object = response.json() alert3 = json_object['alerts']['alert'][3] time_obj_effective = parse(alert3[\"effective\"]) print(time_obj_effective.strftime('Alert effective starting from the %d, %b %Y at %H:%M o\\'clock')) display: Alert effective starting from the 12, Jan 2023 at 07:00 o'clock For datetime.datetime docs check the link .","title":"Encoding"},{"location":"development/dev_framework/","text":"","title":"Dev-Framework"},{"location":"development/todos/","text":"Development plan Here is a list of all todos required to build the app. TODO: App-Performance It's recommended to use the python package orjson for Data Serialization instead of json. See details . pip install --upgrade orjson Use WebGL to render graphs. Example: import pandas as pd import numpy as np import plotly.express as px N = 1000 df = pd.DataFrame(dict(x=np.random.randn(N), y=np.random.randn(N))) fig = px.scatter(df, x=\"x\", y=\"y\", render_mode='webgl') TODO: App-Flexibility Maximize data retrieval per call Minimize number of calls in the dash-app TODO: current location Current location through IP address see page . Requirements: Update for dash components each 15 minutes, as the actual weather data is updated each 15 Minutes. - Use dcc.Interval for live updates: The dcc.Interval element allows you to update components on a predefined interval. The n_intervals property is an integer that is automatically incremented every time interval milliseconds pass. You can listen to this variable inside your app's callback to fire the callback on a predefined interval --> See following link for live updates in dash: link . - Use Flask_caching for memoization: This can be used to store data in cache (filesystem/redis) for 15 minutes in our case.","title":"Development plan"},{"location":"development/todos/#development-plan","text":"Here is a list of all todos required to build the app. TODO: App-Performance It's recommended to use the python package orjson for Data Serialization instead of json. See details . pip install --upgrade orjson Use WebGL to render graphs. Example: import pandas as pd import numpy as np import plotly.express as px N = 1000 df = pd.DataFrame(dict(x=np.random.randn(N), y=np.random.randn(N))) fig = px.scatter(df, x=\"x\", y=\"y\", render_mode='webgl') TODO: App-Flexibility Maximize data retrieval per call Minimize number of calls in the dash-app TODO: current location Current location through IP address see page . Requirements: Update for dash components each 15 minutes, as the actual weather data is updated each 15 Minutes. - Use dcc.Interval for live updates: The dcc.Interval element allows you to update components on a predefined interval. The n_intervals property is an integer that is automatically incremented every time interval milliseconds pass. You can listen to this variable inside your app's callback to fire the callback on a predefined interval --> See following link for live updates in dash: link . - Use Flask_caching for memoization: This can be used to store data in cache (filesystem/redis) for 15 minutes in our case.","title":"Development plan"},{"location":"prototyping/1.tools/","text":"Wireframing Tool Open source software Inkscape combined with python script for interactivity is used as a wireframing tool. Example: Each frame is exported as svg-file, such as: Inkscape check the link for exporting svg files.","title":"Wireframe"},{"location":"prototyping/1.tools/#wireframing-tool","text":"Open source software Inkscape combined with python script for interactivity is used as a wireframing tool.","title":"Wireframing Tool"},{"location":"prototyping/1.tools/#example","text":"Each frame is exported as svg-file, such as:","title":"Example:"},{"location":"prototyping/1.tools/#inkscape","text":"check the link for exporting svg files.","title":"Inkscape"},{"location":"research/api_limitations/","text":"API free plan limitations Sample HTTP request An example of extensive HTTP request to retrieve the maximum data is given as follow: GET https://api.weatherapi.com/v1/forecast.json?key=API_KEY&q=berlin&alerts=yes&aqi=yes Content-Type: application/json The response gives for berlin: location: latitude, longitude, timezone, current time, ...etc. weather data for 3 days: weather condition, weather icon for each hour, ... etc. weather alerts if any. Free plan features The API free of charge plan allows the following: - HTTPS Protocol - Realtime weather Limitations The API free of charge still has the following restrictions: - 1,000,000 calls per month --> around 32,258 per day. - forcast for up to 3 days TODO: Maximize data retrieval per call Minimize number of calls in the dash-app Suppose a user-per-day target is set to be 100 (each user uses app just once a day), the app should allow a maximum of 320 calls per usage . The actual weather data is updated each 15 Minutes --> 96 actual-calls per user are required to maintain reporting live weather data. Plan: Use other api to retrieve the current city/town Requirements This plan requires the usage of a link back, use examples: As text: Powered by <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\">WeatherAPI.com</a> Or as an image: <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\"><img src='//cdn.weatherapi.com/v4/images/weatherapi_logo.png' alt=\"Weather data by WeatherAPI.com\" border=\"0\"></a>","title":"Weather API & limitations"},{"location":"research/api_limitations/#api-free-plan-limitations","text":"","title":"API free plan limitations"},{"location":"research/api_limitations/#sample-http-request","text":"An example of extensive HTTP request to retrieve the maximum data is given as follow: GET https://api.weatherapi.com/v1/forecast.json?key=API_KEY&q=berlin&alerts=yes&aqi=yes Content-Type: application/json The response gives for berlin: location: latitude, longitude, timezone, current time, ...etc. weather data for 3 days: weather condition, weather icon for each hour, ... etc. weather alerts if any.","title":"Sample HTTP request"},{"location":"research/api_limitations/#free-plan-features","text":"The API free of charge plan allows the following: - HTTPS Protocol - Realtime weather","title":"Free plan features"},{"location":"research/api_limitations/#limitations","text":"The API free of charge still has the following restrictions: - 1,000,000 calls per month --> around 32,258 per day. - forcast for up to 3 days TODO: Maximize data retrieval per call Minimize number of calls in the dash-app Suppose a user-per-day target is set to be 100 (each user uses app just once a day), the app should allow a maximum of 320 calls per usage . The actual weather data is updated each 15 Minutes --> 96 actual-calls per user are required to maintain reporting live weather data. Plan: Use other api to retrieve the current city/town","title":"Limitations"},{"location":"research/api_limitations/#requirements","text":"This plan requires the usage of a link back, use examples: As text: Powered by <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\">WeatherAPI.com</a> Or as an image: <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\"><img src='//cdn.weatherapi.com/v4/images/weatherapi_logo.png' alt=\"Weather data by WeatherAPI.com\" border=\"0\"></a>","title":"Requirements"},{"location":"research/google_maps_api/","text":"Google Maps API Among the available APIs, The Google Maps Platform APIs offers the Maps Embed API, which is to be used to render map locations. The Maps Embed API With a simple HTTP request and no JavaScript ist required, the map can be embedded using a Maps Embed API URL as src for the iframe: <iframe width=\"600\" height=\"450\" style=\"border:0\" loading=\"lazy\" allowfullscreen referrerpolicy=\"no-referrer-when-downgrade\" src=\"https://www.google.com/maps/embed/v1/place?key= &q=Space+Needle,Seattle+WA\"> </iframe> Costs All Maps Embed API requests are available at no charge with unlimited usage.","title":"Google Maps API"},{"location":"research/google_maps_api/#google-maps-api","text":"Among the available APIs, The Google Maps Platform APIs offers the Maps Embed API, which is to be used to render map locations.","title":"Google Maps API"},{"location":"research/google_maps_api/#the-maps-embed-api","text":"With a simple HTTP request and no JavaScript ist required, the map can be embedded using a Maps Embed API URL as src for the iframe: <iframe width=\"600\" height=\"450\" style=\"border:0\" loading=\"lazy\" allowfullscreen referrerpolicy=\"no-referrer-when-downgrade\" src=\"https://www.google.com/maps/embed/v1/place?key= &q=Space+Needle,Seattle+WA\"> </iframe>","title":"The Maps Embed API"},{"location":"research/google_maps_api/#costs","text":"All Maps Embed API requests are available at no charge with unlimited usage.","title":"Costs"},{"location":"research/unsplash_api/","text":"Teleport API Unsplash API offers an outstanding dataset of images. A random photo in the urban area can be accessed with HTTP request. Search image with city name We can find an imgae in the city with the city name using the following HTTP request: ### Photo in city GET https://api.unsplash.com/search/photos?client_id=API_KEY&query=CITY_NAME Content-Type: application/json As a result: \"total\": 523, \"total_pages\": 53, \"results\": [ { \"id\": \"18fvXEV1R_A\", \"slug\": \"brown-concrete-building-under-blue-sky-during-daytime-18fvXEV1R_A\", \"created_at\": \"2020-02-11T18:08:27Z\", \"updated_at\": \"2024-01-21T05:14:18Z\", \"promoted_at\": null, \"width\": 3968, \"height\": 2976, \"color\": \"#d9d9f3\", \"blur_hash\": \"LkMtR7t6krof%%j[jsofI9a|nhjY\", \"description\": \" Hassan II Mosque in Casablanca, Morocco\", \"alt_description\": \"brown concrete building under blue sky during daytime\", \"breadcrumbs\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3\", \"full\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?crop=entropy&cs=srgb&fm=jpg&ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3&q=85\", \"regular\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3&q=80&w=1080\", \"small\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3&q=80&w=400\", \"thumb\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3&q=80&w=200\", \"small_s3\": \"https://s3.us-west-2.amazonaws.com/images.unsplash.com/small/photo-1581443459255-e895f2a4222f\" }, ... Costs Unsplash API is available at no charge with unlimited usage.","title":"Unsplash API"},{"location":"research/unsplash_api/#teleport-api","text":"Unsplash API offers an outstanding dataset of images. A random photo in the urban area can be accessed with HTTP request.","title":"Teleport API"},{"location":"research/unsplash_api/#search-image-with-city-name","text":"We can find an imgae in the city with the city name using the following HTTP request: ### Photo in city GET https://api.unsplash.com/search/photos?client_id=API_KEY&query=CITY_NAME Content-Type: application/json As a result: \"total\": 523, \"total_pages\": 53, \"results\": [ { \"id\": \"18fvXEV1R_A\", \"slug\": \"brown-concrete-building-under-blue-sky-during-daytime-18fvXEV1R_A\", \"created_at\": \"2020-02-11T18:08:27Z\", \"updated_at\": \"2024-01-21T05:14:18Z\", \"promoted_at\": null, \"width\": 3968, \"height\": 2976, \"color\": \"#d9d9f3\", \"blur_hash\": \"LkMtR7t6krof%%j[jsofI9a|nhjY\", \"description\": \" Hassan II Mosque in Casablanca, Morocco\", \"alt_description\": \"brown concrete building under blue sky during daytime\", \"breadcrumbs\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3\", \"full\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?crop=entropy&cs=srgb&fm=jpg&ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3&q=85\", \"regular\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3&q=80&w=1080\", \"small\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3&q=80&w=400\", \"thumb\": \"https://images.unsplash.com/photo-1581443459255-e895f2a4222f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NTQ4Mjl8MHwxfHNlYXJjaHwxfHxjYXNhYmxhbmNhfGVufDB8fHx8MTcwNTgzNTM4Nnww&ixlib=rb-4.0.3&q=80&w=200\", \"small_s3\": \"https://s3.us-west-2.amazonaws.com/images.unsplash.com/small/photo-1581443459255-e895f2a4222f\" }, ...","title":"Search image with city name"},{"location":"research/unsplash_api/#costs","text":"Unsplash API is available at no charge with unlimited usage.","title":"Costs"},{"location":"testing/test_framework/","text":"","title":"Testing-Framework"}]}